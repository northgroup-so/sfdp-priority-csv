name: Update SFDP CSV (PR + Auto-merge)

on:
    schedule:
        - cron: "0 */3 * * *" # every 3 hours (UTC)
    workflow_dispatch:

permissions:
    contents: write
    pull-requests: write

jobs:
    update:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Generate CSV files
              shell: bash
              run: |
                  set -euo pipefail
                  mkdir -p data
                  curl --silent --location 'https://api.solana.org/api/community/v1/sfdp_participants' \
                  | jq -r '["No","Mainnet Pubkey","state","Onboarding Priority","Onboarded @ Epoch"],
                           (to_entries[]
                            | select(.value.state!="Rejected" and .value.state!="Retired")
                            | [.key+1, .value.mainnetBetaPubkey, .value.state, (.value.onboardingNumber // "null"), (.value.sfdp2OnboardingEpoch // "null")])
                           | @csv' \
                  > data/sfdp_participants.csv
                  ts=$(date -u +'%Y-%m-%dT%H')
                  cp data/sfdp_participants.csv "data/sfdp_participants_${ts}.csv"

            - name: Analyze changes (new participants & state changes)
              id: diff
              shell: bash
              run: |
                  set -euo pipefail

                  if git show HEAD:data/sfdp_participants.csv > old.csv 2>/dev/null; then
                    :
                  else
                    : > old.csv
                  fi

                  # maps: pubkey -> state
                  awk -F, 'NR>1 {gsub(/"/,""); print $2","$3}' old.csv > old_map.txt || true
                  awk -F, 'NR>1 {gsub(/"/,""); print $2","$3}' data/sfdp_participants.csv > new_map.txt

                  # create lookup files
                  sort -t, -k1,1 old_map.txt > old_sorted.txt
                  sort -t, -k1,1 new_map.txt > new_sorted.txt

                  # new participants (in new, not in old)
                  cut -d, -f1 old_sorted.txt > old_keys.txt || true
                  cut -d, -f1 new_sorted.txt > new_keys.txt
                  comm -13 old_keys.txt new_keys.txt > new_pubkeys.txt

                  BODY=""

                  # handle new participants
                  while read -r pk; do
                    [ -z "$pk" ] && continue
                    ns=$(grep "^$pk," new_sorted.txt | cut -d, -f2- | head -n1)
                    BODY="${BODY}${pk}: No data -> ${ns}\n"
                  done < new_pubkeys.txt

                  # handle state changes
                  join -t, -j1 -o 1.1,1.2,2.2 old_sorted.txt new_sorted.txt > joined.txt || true
                  while IFS=, read -r pk os ns; do
                    if [ "$os" != "$ns" ]; then
                      BODY="${BODY}${pk}: ${os} -> ${ns}\n"
                    fi
                  done < joined.txt

                  SUBJECT="Update SFDP CSV ($(date -u '+%Y-%m-%d %H:%M:%S UTC'))"

                  if [ -z "$BODY" ]; then
                    BODY="No new participants or state changes."
                  fi

                  {
                    echo "subject<<EOF"
                    echo "$SUBJECT"
                    echo "EOF"
                    echo "body<<EOF"
                    echo -e "$BODY"
                    echo "EOF"
                  } >> "$GITHUB_OUTPUT"

            - name: Create/update Pull Request
              id: cpr
              uses: peter-evans/create-pull-request@v6
              with:
                  commit-message: |
                      ${{ steps.diff.outputs.subject }}

                      ${{ steps.diff.outputs.body }}
                  branch: bot/update-sfdp-csv
                  title: ${{ steps.diff.outputs.subject }}
                  body: ${{ steps.diff.outputs.body }}
                  labels: automated
                  signoff: false
                  add-paths: |
                      data/sfdp_participants.csv
                      data/sfdp_participants_*.csv

            - name: Enable auto-merge (squash)
              if: steps.cpr.outputs.pull-request-number
              uses: actions/github-script@v7
              with:
                  script: |
                      const prNumber = Number('${{ steps.cpr.outputs.pull-request-number }}');
                      const q = await github.graphql(
                        `
                        query($owner:String!,$repo:String!,$pr:Int!){
                          repository(owner:$owner, name:$repo){
                            pullRequest(number:$pr){ id }
                          }
                        }
                        `,
                        { owner: context.repo.owner, repo: context.repo.repo, pr: prNumber }
                      );
                      const prId = q.repository.pullRequest.id;
                      await github.graphql(
                        `
                        mutation($pullRequestId:ID!){
                          enablePullRequestAutoMerge(input:{pullRequestId:$pullRequestId, mergeMethod:SQUASH}) {
                            clientMutationId
                          }
                        }
                        `,
                        { pullRequestId: prId }
                      );
                      core.info(`Auto-merge enabled for PR #${prNumber}.`)
